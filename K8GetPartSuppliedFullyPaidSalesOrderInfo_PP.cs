///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace K8_UK_PP_Regression
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The K8GetPartSuppliedFullyPaidSalesOrderInfo_PP recording.
    /// </summary>
    [TestModule("385b2ef8-0f34-4ba5-81bc-70cac17faeab", ModuleType.Recording, 1)]
    public partial class K8GetPartSuppliedFullyPaidSalesOrderInfo_PP : ITestModule
    {
        /// <summary>
        /// Holds an instance of the K8_UK_SOP_RegressionRepository repository.
        /// </summary>
        public static K8_UK_SOP_RegressionRepository repo = K8_UK_SOP_RegressionRepository.Instance;

        static K8GetPartSuppliedFullyPaidSalesOrderInfo_PP instance = new K8GetPartSuppliedFullyPaidSalesOrderInfo_PP();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public K8GetPartSuppliedFullyPaidSalesOrderInfo_PP()
        {
            excelFileLocation = "";
            TodayDate = "";
            SalesOrderNum = "";
            FilePath = "C:/Temp/SalesOrderInfoUK.txt";
            TestName = "ONE TIME CASH CUSTOMER UK";
            UserID = "";
            Account = "";
            SalesInvoiceNumber = "";
            Depot = "";
            SAPSalesInvoice = "";
            Goods = "";
            VAT = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static K8GetPartSuppliedFullyPaidSalesOrderInfo_PP Instance
        {
            get { return instance; }
        }

#region Variables

        string _excelFileLocation;

        /// <summary>
        /// Gets or sets the value of variable excelFileLocation.
        /// </summary>
        [TestVariable("6457b4d5-f6d7-4a88-a7c3-2b0424bf1cf4")]
        public string excelFileLocation
        {
            get { return _excelFileLocation; }
            set { _excelFileLocation = value; }
        }

        string _TodayDate;

        /// <summary>
        /// Gets or sets the value of variable TodayDate.
        /// </summary>
        [TestVariable("1dd9a996-e4c6-418d-8894-4705e04492b1")]
        public string TodayDate
        {
            get { return _TodayDate; }
            set { _TodayDate = value; }
        }

        string _SalesOrderNum;

        /// <summary>
        /// Gets or sets the value of variable SalesOrderNum.
        /// </summary>
        [TestVariable("9cd4f6f0-3493-4644-9831-82e179fb8de8")]
        public string SalesOrderNum
        {
            get { return _SalesOrderNum; }
            set { _SalesOrderNum = value; }
        }

        string _FilePath;

        /// <summary>
        /// Gets or sets the value of variable FilePath.
        /// </summary>
        [TestVariable("de183b42-3dfd-4a6a-8f77-2c06a8c7ff26")]
        public string FilePath
        {
            get { return _FilePath; }
            set { _FilePath = value; }
        }

        string _TestName;

        /// <summary>
        /// Gets or sets the value of variable TestName.
        /// </summary>
        [TestVariable("53cc17f8-4923-4de2-b4ee-86ff179d0bd1")]
        public string TestName
        {
            get { return _TestName; }
            set { _TestName = value; }
        }

        string _UserID;

        /// <summary>
        /// Gets or sets the value of variable UserID.
        /// </summary>
        [TestVariable("a5acfc1f-2a4e-4b74-b54a-46a7c579a0fc")]
        public string UserID
        {
            get { return _UserID; }
            set { _UserID = value; }
        }

        string _Account;

        /// <summary>
        /// Gets or sets the value of variable Account.
        /// </summary>
        [TestVariable("f3cf4676-e85e-483c-be16-12b5ea4cdbd5")]
        public string Account
        {
            get { return _Account; }
            set { _Account = value; }
        }

        string _SalesInvoiceNumber;

        /// <summary>
        /// Gets or sets the value of variable SalesInvoiceNumber.
        /// </summary>
        [TestVariable("a8abf5fb-d208-4162-99cb-ce08ab110fa1")]
        public string SalesInvoiceNumber
        {
            get { return _SalesInvoiceNumber; }
            set { _SalesInvoiceNumber = value; }
        }

        string _Depot;

        /// <summary>
        /// Gets or sets the value of variable Depot.
        /// </summary>
        [TestVariable("cadd2aad-051a-445a-908b-66db32884157")]
        public string Depot
        {
            get { return _Depot; }
            set { _Depot = value; }
        }

        string _SAPSalesInvoice;

        /// <summary>
        /// Gets or sets the value of variable SAPSalesInvoice.
        /// </summary>
        [TestVariable("2827f7a1-606f-419d-b768-3e8d984e0095")]
        public string SAPSalesInvoice
        {
            get { return _SAPSalesInvoice; }
            set { _SAPSalesInvoice = value; }
        }

        string _Goods;

        /// <summary>
        /// Gets or sets the value of variable Goods.
        /// </summary>
        [TestVariable("f38db20b-c20d-48b0-a945-3d14ec286232")]
        public string Goods
        {
            get { return _Goods; }
            set { _Goods = value; }
        }

        string _VAT;

        /// <summary>
        /// Gets or sets the value of variable VAT.
        /// </summary>
        [TestVariable("f552a33e-f36f-4ff2-8c05-39706451ecba")]
        public string VAT
        {
            get { return _VAT; }
            set { _VAT = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            try {
                //Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'Ql1054K8QA3SalesOrderProcessingD.Display' at 35;9.", repo.Ql1054K8QA3SalesOrderProcessingD.DisplayInfo, new RecordItemIndex(0));
                //repo.Ql1054K8QA3SalesOrderProcessingD.Display.Click("35;9");
                //Delay.Milliseconds(200);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(0)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'SupplyServiceSelector.ButtonNo' at Center.", repo.SupplyServiceSelector.ButtonNoInfo, new RecordItemIndex(1));
                repo.SupplyServiceSelector.ButtonNo.Click();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            SetDate();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'Ql1054K8QA3SalesOrderProcessingD.OrderNumber'.", repo.Ql1054K8QA3SalesOrderProcessingD.OrderNumberInfo, new RecordItemIndex(3));
            Validate.Exists(repo.Ql1054K8QA3SalesOrderProcessingD.OrderNumberInfo);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'Ql1054K8QA3SalesOrderProcessingD.OrderNumber' at 30;10.", repo.Ql1054K8QA3SalesOrderProcessingD.OrderNumberInfo, new RecordItemIndex(4));
            repo.Ql1054K8QA3SalesOrderProcessingD.OrderNumber.DoubleClick("30;10");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'L' with focus on 'Ql1054K8QA3SalesOrderProcessingD.OrderNumber'.", repo.Ql1054K8QA3SalesOrderProcessingD.OrderNumberInfo, new RecordItemIndex(5));
            repo.Ql1054K8QA3SalesOrderProcessingD.OrderNumber.PressKeys("L", 100);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'Ql1054K8QA3SalesOrderProcessingD.OrderNumber2'.", repo.Ql1054K8QA3SalesOrderProcessingD.OrderNumber2Info, new RecordItemIndex(6));
            Validate.Exists(repo.Ql1054K8QA3SalesOrderProcessingD.OrderNumber2Info);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'Ql1054K8QA3SalesOrderProcessingD.OrderNumber2'.", repo.Ql1054K8QA3SalesOrderProcessingD.OrderNumber2Info, new RecordItemIndex(7));
            repo.Ql1054K8QA3SalesOrderProcessingD.OrderNumber2.PressKeys("{Tab}", 100);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(8));
            Delay.Duration(2000, false);
            
            Report.Screenshot(ReportLevel.Success, "User", "Sales Order", repo.Ql1054K8QA3SalesOrderProcessingD.Self, false, new RecordItemIndex(9));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'Ql1054K8QA3SalesOrderProcessingD.Display'.", repo.Ql1054K8QA3SalesOrderProcessingD.DisplayInfo, new RecordItemIndex(10));
            Validate.Exists(repo.Ql1054K8QA3SalesOrderProcessingD.DisplayInfo);
            Delay.Milliseconds(100);
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'Ql1054K8QA3SalesOrderProcessingD.Display' at Center.", repo.Ql1054K8QA3SalesOrderProcessingD.DisplayInfo, new RecordItemIndex(11));
                repo.Ql1054K8QA3SalesOrderProcessingD.Display.Click();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(11)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Kclient.DisplaySalesOrderHistory' at 107;9.", repo.Kclient.DisplaySalesOrderHistoryInfo, new RecordItemIndex(12));
            repo.Kclient.DisplaySalesOrderHistory.Click("107;9");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'SalesOrderHistory.OrderNumber'.", repo.SalesOrderHistory.OrderNumberInfo, new RecordItemIndex(13));
            Validate.Exists(repo.SalesOrderHistory.OrderNumberInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Text' from item 'SalesOrderHistory.OrderNumber' and assigning its value to variable 'SalesOrderNum'.", repo.SalesOrderHistory.OrderNumberInfo, new RecordItemIndex(14));
            SalesOrderNum = repo.SalesOrderHistory.OrderNumber.Element.GetAttributeValueText("Text");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", SalesOrderNum, new RecordItemIndex(15));
            
            WriteToTextFile(FilePath, "=============================================");
            Delay.Milliseconds(0);
            
            WriteToTextFile(FilePath, TestName);
            Delay.Milliseconds(0);
            
            WriteToTextFile(FilePath, TodayDate);
            Delay.Milliseconds(0);
            
            WriteToTextFile(FilePath, "=============================================");
            Delay.Milliseconds(0);
            
            WriteToTextFile(FilePath, SalesOrderNum);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'SalesOrderHistory.RowRow.D723manager'.", repo.SalesOrderHistory.RowRow.D723managerInfo, new RecordItemIndex(21));
            Validate.Exists(repo.SalesOrderHistory.RowRow.D723managerInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'AccessibleName' from item 'SalesOrderHistory.RowRow.D723manager' and assigning its value to variable 'UserID'.", repo.SalesOrderHistory.RowRow.D723managerInfo, new RecordItemIndex(22));
            UserID = repo.SalesOrderHistory.RowRow.D723manager.Element.GetAttributeValueText("AccessibleName");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", UserID, new RecordItemIndex(23));
            
            WriteToTextFile(FilePath, UserID);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'SalesOrderHistory.RowRow.CD723'.", repo.SalesOrderHistory.RowRow.CD723Info, new RecordItemIndex(25));
            Validate.Exists(repo.SalesOrderHistory.RowRow.CD723Info);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'AccessibleName' from item 'SalesOrderHistory.RowRow.CD723' and assigning its value to variable 'Account'.", repo.SalesOrderHistory.RowRow.CD723Info, new RecordItemIndex(26));
            Account = repo.SalesOrderHistory.RowRow.CD723.Element.GetAttributeValueText("AccessibleName");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Account, new RecordItemIndex(27));
            
            WriteToTextFile(FilePath, Account);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'SalesOrderHistory.RowRow.Cell00010967'.", repo.SalesOrderHistory.RowRow.Cell00010967Info, new RecordItemIndex(29));
            Validate.Exists(repo.SalesOrderHistory.RowRow.Cell00010967Info);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'AccessibleName' from item 'SalesOrderHistory.RowRow.Cell00010967' and assigning its value to variable 'SalesInvoiceNumber'.", repo.SalesOrderHistory.RowRow.Cell00010967Info, new RecordItemIndex(30));
            SalesInvoiceNumber = repo.SalesOrderHistory.RowRow.Cell00010967.Element.GetAttributeValueText("AccessibleName");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", SalesInvoiceNumber, new RecordItemIndex(31));
            
            WriteToTextFile(FilePath, SalesInvoiceNumber);
            Delay.Milliseconds(0);
            
            setSAPSalesInvoice(Depot);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'SalesOrderHistory.RowRow.Cell6511'.", repo.SalesOrderHistory.RowRow.Cell6511Info, new RecordItemIndex(34));
            Validate.Exists(repo.SalesOrderHistory.RowRow.Cell6511Info);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'AccessibleName' from item 'SalesOrderHistory.RowRow.Cell6511' and assigning its value to variable 'Goods'.", repo.SalesOrderHistory.RowRow.Cell6511Info, new RecordItemIndex(35));
            Goods = repo.SalesOrderHistory.RowRow.Cell6511.Element.GetAttributeValueText("AccessibleName");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Goods, new RecordItemIndex(36));
            
            WriteToTextFile(FilePath, Goods);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'SalesOrderHistory.RowRow.Cell1302'.", repo.SalesOrderHistory.RowRow.Cell1302Info, new RecordItemIndex(38));
            Validate.Exists(repo.SalesOrderHistory.RowRow.Cell1302Info);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'AccessibleName' from item 'SalesOrderHistory.RowRow.Cell1302' and assigning its value to variable 'VAT'.", repo.SalesOrderHistory.RowRow.Cell1302Info, new RecordItemIndex(39));
            VAT = repo.SalesOrderHistory.RowRow.Cell1302.Element.GetAttributeValueText("AccessibleName");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", VAT, new RecordItemIndex(40));
            
            WriteToTextFile(FilePath, VAT);
            Delay.Milliseconds(0);
            
            WriteToTextFile(FilePath, "---------------------------------------------");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'SalesOrder193931HJIlford.ButtonOK'.", repo.SalesOrder193931HJIlford.ButtonOKInfo, new RecordItemIndex(43));
            Validate.Exists(repo.SalesOrder193931HJIlford.ButtonOKInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SalesOrder193931HJIlford.ButtonOK' at Center.", repo.SalesOrder193931HJIlford.ButtonOKInfo, new RecordItemIndex(44));
            repo.SalesOrder193931HJIlford.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'Ql1054K8QA3SalesOrderProcessingD.Process'.", repo.Ql1054K8QA3SalesOrderProcessingD.ProcessInfo, new RecordItemIndex(45));
            Validate.Exists(repo.Ql1054K8QA3SalesOrderProcessingD.ProcessInfo);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Ql1054K8QA3SalesOrderProcessingD.Process' at 47;20.", repo.Ql1054K8QA3SalesOrderProcessingD.ProcessInfo, new RecordItemIndex(46));
            repo.Ql1054K8QA3SalesOrderProcessingD.Process.Click("47;20");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ActionSalesOrderSL17707.ButtonOK'.", repo.ActionSalesOrderSL17707.ButtonOKInfo, new RecordItemIndex(47));
            Validate.Exists(repo.ActionSalesOrderSL17707.ButtonOKInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ActionSalesOrderSL17707.ButtonOK' at 51;11.", repo.ActionSalesOrderSL17707.ButtonOKInfo, new RecordItemIndex(48));
            repo.ActionSalesOrderSL17707.ButtonOK.Click("51;11");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(49));
            Delay.Duration(2000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
